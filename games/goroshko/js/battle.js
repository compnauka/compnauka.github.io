/**
 * –ú–æ–¥—É–ª—å –±–æ–π–æ–≤–æ—ó —Å–∏—Å—Ç–µ–º–∏
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ª–æ–≥—ñ–∫—É –±–æ—é –º—ñ–∂ –≥–µ—Ä–æ—î–º —Ç–∞ –º–æ–Ω—Å—Ç—Ä–æ–º
 */

import { GAME_CONFIG } from './config.js';
import { soundEngine } from './sound.js';

/**
 * –ö–ª–∞—Å BattleManager
 * –ö–µ—Ä—É—î –±–æ—î–º, –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è–º —Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
 */
export class BattleManager {
  constructor() {
    this.sceneEl = null;
    this.logEl = null;
    this.heroHealthBar = null;
    this.monsterHealthBar = null;
    this.heroHealthText = null;
    this.monsterHealthText = null;
    this.monsterIconEl = null;
    this.monsterNameEl = null;

    this.heroHealth = GAME_CONFIG.baseHealth;
    this.heroDamage = 0;
    this.heroArmor = 0;
    this.monsterHealth = 0;
    this.monsterMaxHealth = 0; // –î–æ–¥–∞–Ω–æ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –∑–¥–æ—Ä–æ–≤'—è
    this.monsterDamage = 0;
    this.monsterName = '';
    this.monsterIcon = '';
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –±–æ—é
   * @param {Object} elements - –û–±'—î–∫—Ç –∑ DOM-–µ–ª–µ–º–µ–Ω—Ç–∞–º–∏
   */
  init(elements) {
    this.sceneEl = elements.scene;
    this.logEl = elements.log;
    this.heroHealthBar = elements.heroHealthBar;
    this.monsterHealthBar = elements.monsterHealthBar;
    this.heroHealthText = elements.heroHealthText;
    this.monsterHealthText = elements.monsterHealthText;
    this.monsterIconEl = elements.monsterIcon;
    this.monsterNameEl = elements.monsterName;
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ—Ä–æ—è
   * @param {Object} stats - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {health, damage, armor}
   */
  setHeroStats(stats) {
    this.heroHealth = stats.health;
    this.heroDamage = stats.damage;
    this.heroArmor = stats.armor;
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞
   * @param {Object} stats - –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ {health, damage, name, icon}
   */
  setMonsterStats(stats) {
    this.monsterHealth = stats.health;
    this.monsterMaxHealth = stats.health; // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–¥–æ—Ä–æ–≤'—è
    this.monsterDamage = stats.damage;
    this.monsterName = stats.name;
    this.monsterIcon = stats.icon;
  }

  /**
   * –ü–æ–∫–∞–∑ —Å—Ü–µ–Ω–∏ –±–æ—é
   */
  show() {
    if (!this.sceneEl) return;

    this.sceneEl.classList.remove('hidden');
    this.logEl.innerHTML = '';

    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    this._updateDisplay();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ —Å—Ü–µ–Ω–∏ –±–æ—é
    this.sceneEl.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
  }

  /**
   * –ü—Ä–∏—Ö–æ–≤—É–≤–∞–Ω–Ω—è —Å—Ü–µ–Ω–∏ –±–æ—é
   */
  hide() {
    if (!this.sceneEl) return;
    this.sceneEl.classList.add('hidden');
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—é
   * @returns {Promise<boolean>} - true —è–∫—â–æ –≥–µ—Ä–æ–π –ø–µ—Ä–µ–º—ñ–≥, false —è–∫—â–æ –ø—Ä–æ–≥—Ä–∞–≤
   */
  async startBattle() {
    this.show();
    
    this._log(`üí• –ë—ñ–π —Ä–æ–∑–ø–æ—á–∞–≤—Å—è! ${this.monsterName} –∞—Ç–∞–∫—É—î!`);
    await this._delay(GAME_CONFIG.battleRoundMs);

    // –ë—ñ–π—Ü—ñ–≤—Å—å–∫–∏–π —Ü–∏–∫–ª
    while (this.heroHealth > 0 && this.monsterHealth > 0) {
      // –•—ñ–¥ –≥–µ—Ä–æ—è
      const heroDmg = Math.max(1, this.heroDamage);
      this.monsterHealth -= heroDmg;
      this._log(`‚öîÔ∏è –ö–æ—Ç–∏–≥–æ—Ä–æ—à–∫–æ –∑–∞–≤–¥–∞—î ${heroDmg} —à–∫–æ–¥–∏!`);
      this._updateDisplay();

      if (this.monsterHealth <= 0) {
        this._log(`üéâ ${this.monsterName} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!`);
        await this._delay(GAME_CONFIG.battleRoundMs);
        soundEngine.play('victory');
        return true;
      }

      await this._delay(GAME_CONFIG.battleRoundMs);

      // –•—ñ–¥ –º–æ–Ω—Å—Ç—Ä–∞
      const reducedDmg = Math.max(0, this.monsterDamage - this.heroArmor);
      this.heroHealth -= reducedDmg;
      this._log(`üíÄ ${this.monsterName} –∑–∞–≤–¥–∞—î ${reducedDmg} —à–∫–æ–¥–∏! (${this.heroArmor} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ)`);
      this._updateDisplay();

      if (this.heroHealth <= 0) {
        this._log(`üíî –ö–æ—Ç–∏–≥–æ—Ä–æ—à–∫–æ –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π...`);
        await this._delay(GAME_CONFIG.battleRoundMs);
        soundEngine.play('defeat');
        return false;
      }

      await this._delay(GAME_CONFIG.battleRoundMs);
    }

    return this.heroHealth > 0;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è
   */
  _updateDisplay() {
    // –ì–µ—Ä–æ–π
    const heroPercent = Math.max(0, (this.heroHealth / GAME_CONFIG.baseHealth) * 100);
    this.heroHealthBar.style.width = `${heroPercent}%`;
    this.heroHealthText.textContent = Math.max(0, Math.ceil(this.heroHealth));

    // –ú–æ–Ω—Å—Ç—Ä (–≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–¥–æ—Ä–æ–≤'—è –¥–ª—è –≤—ñ–¥—Å–æ—Ç–∫–∞)
    // const monsterMaxHealth = this.monsterHealth + (this.heroDamage * Math.ceil(this.monsterHealth / this.heroDamage || 1)); // <- –¶–µ –±—É–≤ –ë–ê–ì
    const monsterPercent = Math.max(0, (this.monsterHealth / this.monsterMaxHealth) * 100); // <- –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ
    this.monsterHealthBar.style.width = `${monsterPercent}%`;
    this.monsterHealthText.textContent = Math.max(0, Math.ceil(this.monsterHealth));

    // –Ü–∫–æ–Ω–∫–∞ —Ç–∞ —ñ–º'—è –º–æ–Ω—Å—Ç—Ä–∞
    if (this.monsterIconEl) this.monsterIconEl.textContent = this.monsterIcon;
    if (this.monsterNameEl) this.monsterNameEl.textContent = this.monsterName;
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–æ –ª–æ–≥—É –±–æ—é
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  _log(message) {
    if (!this.logEl) return;
    
    const line = document.createElement('div');
    line.className = 'py-0.5 text-yellow-200';
    line.textContent = `> ${message}`;
    this.logEl.appendChild(line);
    this.logEl.scrollTop = this.logEl.scrollHeight;
  }

  /**
   * –ó–∞—Ç—Ä–∏–º–∫–∞
   * @param {number} ms - –ú—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∏
   * @returns {Promise}
   */
  _delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  /**
   * –°–∫–∏–¥–∞–Ω–Ω—è –±–æ—é
   */
  reset() {
    this.heroHealth = GAME_CONFIG.baseHealth;
    this.heroDamage = 0;
    this.heroArmor = 0;
    this.monsterHealth = 0;
    this.monsterMaxHealth = 0; // –°–∫–∏–¥–∞—î–º–æ
    this.monsterDamage = 0;
    this.hide();
  }
}