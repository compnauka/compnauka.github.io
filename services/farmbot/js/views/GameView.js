/**
 * –ö–ª–∞—Å –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—è –≥—Ä–∏ (View), —â–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ç–∞ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ DOM
 *
 * –û—Å–Ω–æ–≤–Ω—ñ –æ–±–æ–≤'—è–∑–∫–∏:
 * - –û–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–≥—ñ–¥–Ω–æ –∑—ñ —Å—Ç–∞–Ω–æ–º –º–æ–¥–µ–ª—ñ
 * - –°—Ç–≤–æ—Ä—é—î —ñ–≥—Ä–æ–≤–µ –ø–æ–ª–µ, –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥, —Ä—ñ–≤–Ω—ñ–≤, –ø—Ä–æ–≥—Ä–∞–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
 * - –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ä–æ–±–æ—Ç–∞, –ø—Ä–µ–¥–º–µ—Ç—ñ–≤, —Å—Ç—ñ–Ω, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
 * - –ù–µ –º—ñ—Å—Ç–∏—Ç—å –ª–æ–≥—ñ–∫–∏ –≥—Ä–∏, –ª–∏—à–µ —Ä–æ–±–æ—Ç—É –∑ DOM —Ç–∞ UI
 */
class GameView {
  constructor() {
    // –ö–µ—à—É–≤–∞–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
    this.robotField = document.querySelector(CONFIG.SELECTORS.ROBOT_FIELD); // –ü–æ–ª–µ –≥—Ä–∏
    this.programContainer = document.querySelector(CONFIG.SELECTORS.PROGRAM); // –ü—Ä–æ–≥—Ä–∞–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    this.commandsContainer = document.querySelector(CONFIG.SELECTORS.COMMANDS_CONTAINER); // –ö–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥
    this.levelProgress = document.querySelector(CONFIG.SELECTORS.LEVEL_PROGRESS); // –ü—Ä–æ–≥—Ä–µ—Å —Ä—ñ–≤–Ω—ñ–≤
    this.levelDescription = document.querySelector(CONFIG.SELECTORS.LEVEL_DESCRIPTION); // –û–ø–∏—Å —Ä—ñ–≤–Ω—è
    this.toast = document.querySelector(CONFIG.SELECTORS.TOAST); // –í—ñ–∫–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    
    // –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å (–¥–ª—è –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è)
    this.currentLevel = 1;
    
    // –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è —Ä–æ–±–æ—Ç–æ–º
    this.initCommandButtons();
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è (–æ–Ω–æ–≤–ª—é—î –ø—ñ–¥—Å–≤—ñ—á—É–≤–∞–Ω–Ω—è —ñ —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥)
   * @param {number} level - –Ω–æ–º–µ—Ä —Ä—ñ–≤–Ω—è
   */
  setCurrentLevel(level) {
    this.currentLevel = level;
    this.initCommandButtons();
  }

  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–Ω–æ–ø–æ–∫ –∫–æ–º–∞–Ω–¥ (–≤–≥–æ—Ä—É, –≤–Ω–∏–∑, –≤–ª—ñ–≤–æ, –≤–ø—Ä–∞–≤–æ)
   * –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ –∑–º—ñ–Ω—ñ —Ä—ñ–≤–Ω—è –∞–±–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ –≥—Ä–∏
   */
  initCommandButtons() {
    this.commandsContainer.innerHTML = '';
    
    const commands = [
      { id: CONFIG.COMMANDS.UP, label: '‚¨ÜÔ∏è –í–≥–æ—Ä—É' },
      { id: CONFIG.COMMANDS.DOWN, label: '‚¨áÔ∏è –í–Ω–∏–∑' },
      { id: CONFIG.COMMANDS.LEFT, label: '‚¨ÖÔ∏è –í–ª—ñ–≤–æ' },
      { id: CONFIG.COMMANDS.RIGHT, label: '‚û°Ô∏è –í–ø—Ä–∞–≤–æ' }
    ];
    
    commands.forEach(cmd => {
      const commandBtn = document.createElement('div');
      commandBtn.className = 'command';
      commandBtn.innerHTML = cmd.label;
      commandBtn.dataset.command = cmd.id;
      this.commandsContainer.appendChild(commandBtn);
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
   * @param {number} gridSize - —Ä–æ–∑–º—ñ—Ä —Å—ñ—Ç–∫–∏ (–∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–ª—ñ—Ç–∏–Ω–æ–∫ –ø–æ –æ—Å—ñ)
   * –î–∏–Ω–∞–º—ñ—á–Ω–æ —Å—Ç–≤–æ—Ä—é—î DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–ª—ñ—Ç–∏–Ω–∫–∏
   */
  createField(gridSize) {
    this.robotField.innerHTML = '';
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∏–π —Ä–æ–∑–º—ñ—Ä –∫–ª—ñ—Ç–∏–Ω–æ–∫ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
    let cellSize = 50; // –±–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö –ø–æ–ª—ñ–≤
    
    if (gridSize >= 9) {
      cellSize = 35; // –¥–ª—è –¥—É–∂–µ –≤–µ–ª–∏–∫–∏—Ö –ø–æ–ª—ñ–≤ (9x9, 10x10)
    } else if (gridSize >= 7) {
      cellSize = 40; // –¥–ª—è –≤–µ–ª–∏–∫–∏—Ö –ø–æ–ª—ñ–≤ (7x7, 8x8)
    }
    
    this.robotField.style.gridTemplateColumns = `repeat(${gridSize}, ${cellSize}px)`;
    this.robotField.style.gridTemplateRows = `repeat(${gridSize}, ${cellSize}px)`;
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ CSS –∑–º—ñ–Ω–Ω—É –¥–ª—è —Ä–æ–∑–º—ñ—Ä—É –∫–ª—ñ—Ç–∏–Ω–∫–∏
    document.documentElement.style.setProperty('--cell-size', `${cellSize}px`);
    document.documentElement.style.setProperty('--icon-size', `${Math.floor(cellSize * 0.65)}px`);
    
    for (let y = 0; y < gridSize; y++) {
      for (let x = 0; x < gridSize; x++) {
        const cell = document.createElement('div');
        cell.className = 'cell';
        cell.dataset.x = x;
        cell.dataset.y = y;
        this.robotField.appendChild(cell);
      }
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–∏–¥–∞–ª—è—î –≤—Å—ñ –∫—Ä–æ–∫–∏ –∑ DOM)
   */
  clearProgram() {
    this.programContainer.innerHTML = '';
  }

  /**
   * –î–æ–¥–∞–≤–∞–Ω–Ω—è –∫—Ä–æ–∫—É –¥–æ –ø—Ä–æ–≥—Ä–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   * @param {string} command - –∫–æ–º–∞–Ω–¥–∞ –∫—Ä–æ–∫—É
   * @param {function} deleteCallback - —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫—Ä–æ–∫—É
   * –°—Ç–≤–æ—Ä—é—î DOM-–µ–ª–µ–º–µ–Ω—Ç –¥–ª—è –∫—Ä–æ–∫—É –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –≤–∏–¥–∞–ª–µ–Ω–Ω—è
   */
  addProgramStep(command, deleteCallback) {
    const programStep = document.createElement('div');
    programStep.className = 'program-step';
    programStep.dataset.command = command;
    
    // –ë–∞–∑–æ–≤–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
    programStep.dataset.repeatCount = '1';
    
    // –î–æ–¥–∞—î–º–æ –ø—ñ–∫—Ç–æ–≥—Ä–∞–º—É –∫–æ–º–∞–Ω–¥–∏
    let commandIcon = '';
    switch (command) {
      case CONFIG.COMMANDS.UP:
        commandIcon = '‚¨ÜÔ∏è –í–≥–æ—Ä—É';
        break;
      case CONFIG.COMMANDS.DOWN:
        commandIcon = '‚¨áÔ∏è –í–Ω–∏–∑';
        break;
      case CONFIG.COMMANDS.LEFT:
        commandIcon = '‚¨ÖÔ∏è –í–ª—ñ–≤–æ';
        break;
      case CONFIG.COMMANDS.RIGHT:
        commandIcon = '‚û°Ô∏è –í–ø—Ä–∞–≤–æ';
        break;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –¥–ª—è —ñ–∫–æ–Ω–∫–∏ –∫–æ–º–∞–Ω–¥–∏
    const iconSpan = document.createElement('span');
    iconSpan.className = 'command-icon';
    iconSpan.innerHTML = commandIcon;
    programStep.appendChild(iconSpan);
    
    // –î–æ–¥–∞—î–º–æ –ø–æ–ª–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ 3 —ñ –≤–∏—â–µ
    if (this.currentLevel >= 3) {
      const repeatContainer = document.createElement('div');
      repeatContainer.className = 'repeat-container';
      
      // –î–æ–¥–∞—î–º–æ —Ç–µ–∫—Å—Ç "x" –ø–µ—Ä–µ–¥ –ø–æ–ª–µ–º
      const repeatLabel = document.createElement('span');
      repeatLabel.className = 'repeat-label';
      repeatLabel.textContent = 'x';
      repeatContainer.appendChild(repeatLabel);
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–æ–ª–µ –¥–ª—è –≤–≤–µ–¥–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ–≤—Ç–æ—Ä–µ–Ω—å
      const repeatInput = document.createElement('input');
      repeatInput.type = 'number';
      repeatInput.className = 'repeat-input';
      repeatInput.min = '1';
      repeatInput.max = '10';
      repeatInput.value = '1';
      repeatInput.addEventListener('change', (e) => {
        // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∑–Ω–∞—á–µ–Ω–Ω—è –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º—É –¥—ñ–∞–ø–∞–∑–æ–Ω—ñ
        const value = parseInt(e.target.value);
        if (isNaN(value) || value < 1) {
          e.target.value = '1';
          programStep.dataset.repeatCount = '1';
        } else if (value > 10) {
          e.target.value = '10';
          programStep.dataset.repeatCount = '10';
        } else {
          programStep.dataset.repeatCount = e.target.value;
        }
      });
      
      repeatContainer.appendChild(repeatInput);
      programStep.appendChild(repeatContainer);
    }
    
    // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è
    const deleteBtn = document.createElement('span');
    deleteBtn.className = 'delete-step';
    deleteBtn.innerHTML = '‚úñ';
    deleteBtn.onclick = function(e) {
      e.stopPropagation();
      deleteCallback(programStep);
    };
    
    programStep.appendChild(deleteBtn);
    this.programContainer.appendChild(programStep);
    
    return programStep;
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç—ñ–Ω –Ω–∞ –ø–æ–ª—ñ
   * @param {Array} walls - –º–∞—Å–∏–≤ —Å—Ç—ñ–Ω
   */
  updateWalls(walls) {
    document.querySelectorAll('.cell').forEach(cell => {
      cell.classList.remove('wall');
    });
    
    walls.forEach(wall => {
      const cell = document.querySelector(`.cell[data-x="${wall.x}"][data-y="${wall.y}"]`);
      if (cell) cell.classList.add('wall');
    });
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ–∑–∏—Ü—ñ—ó —Ä–æ–±–æ—Ç–∞
   * @param {Object} position - –ø–æ–∑–∏—Ü—ñ—è —Ä–æ–±–æ—Ç–∞ {x, y}
   */
  updateRobotPosition(position) {
    document.querySelectorAll('.robot-icon').forEach(icon => icon.remove());
    
    const cell = document.querySelector(`.cell[data-x="${position.x}"][data-y="${position.y}"]`);
    if (cell) {
      const robotIcon = document.createElement('div');
      robotIcon.className = 'robot-icon';
      robotIcon.innerHTML = 'ü§ñ';
      cell.appendChild(robotIcon);
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
   * @param {Array} collectibles - –º–∞—Å–∏–≤ –∫–æ–ª–µ–∫—Ü—ñ–π–Ω–∏—Ö –ø—Ä–µ–¥–º–µ—Ç—ñ–≤
   */
  updateCollectibles(collectibles) {
    document.querySelectorAll('.collectible').forEach(item => item.remove());
    
    collectibles.forEach(item => {
      const cell = document.querySelector(`.cell[data-x="${item.x}"][data-y="${item.y}"]`);
      if (cell) {
        const collectibleIcon = document.createElement('div');
        collectibleIcon.className = 'collectible';
        collectibleIcon.innerHTML = item.type;
        cell.appendChild(collectibleIcon);
      }
    });
  }

  /**
   * –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è
   * @param {number} currentLevel - –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
   * @param {Array} completedLevels - –∑–∞–≤–µ—Ä—à–µ–Ω—ñ —Ä—ñ–≤–Ω—ñ
   * @param {function} levelSelectCallback - —Ñ—É–Ω–∫—Ü—ñ—è –∑–≤–æ—Ä–æ—Ç–Ω–æ–≥–æ –≤–∏–∫–ª–∏–∫—É –¥–ª—è –≤–∏–±–æ—Ä—É —Ä—ñ–≤–Ω—è
   */
  createLevelButtons(currentLevel, completedLevels, levelSelectCallback) {
    this.levelProgress.innerHTML = '';
    this.currentLevel = currentLevel;
    
    for (let i = 0; i < CONFIG.LEVELS.length; i++) {
      const levelBtn = document.createElement('div');
      levelBtn.className = 'level-btn';
      
      if (i + 1 === currentLevel) levelBtn.classList.add('active');
      if (completedLevels.includes(i + 1)) levelBtn.classList.add('completed');
      
      levelBtn.textContent = `–†—ñ–≤–µ–Ω—å ${i + 1}`;
      levelBtn.dataset.level = i + 1;
      
      levelBtn.addEventListener('click', () => levelSelectCallback(i + 1));
      this.levelProgress.appendChild(levelBtn);
    }
  }

  /**
   * –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É —Ä—ñ–≤–Ω—è
   * @param {string} description - —Ç–µ–∫—Å—Ç –æ–ø–∏—Å—É
   */
  setLevelDescription(description) {
    // –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü–∏–∫–ª–∏ –¥–ª—è —Ä—ñ–≤–Ω—ñ–≤ 3+
    let updatedDescription = description;
    if (this.currentLevel >= 3 && !description.includes('–ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è')) {
      updatedDescription += ' –¢–µ–ø–µ—Ä —Ç–∏ –º–æ–∂–µ—à –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è (—Ü–∏–∫–ª–∏) –¥–ª—è –∫–æ–º–∞–Ω–¥!';
    }
    this.levelDescription.textContent = updatedDescription;
  }

  /**
   * –í–∏–¥—ñ–ª–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
   * @param {number} index - —ñ–Ω–¥–µ–∫—Å –∫—Ä–æ–∫—É, —è–∫—â–æ -1 —Ç–æ –∑–Ω—ñ–º–∞—î –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤
   */
  highlightProgramStep(index) {
    const steps = this.programContainer.querySelectorAll('.program-step');
    
    // –ó–Ω—ñ–º–∞—î–º–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ —É—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤
    steps.forEach(step => step.classList.remove('active'));
    
    // –Ø–∫—â–æ —ñ–Ω–¥–µ–∫—Å –Ω–µ –≤—ñ–¥'—î–º–Ω–∏–π, –≤–∏–¥—ñ–ª—è—î–º–æ –≤–∫–∞–∑–∞–Ω–∏–π –∫—Ä–æ–∫
    if (index >= 0 && index < steps.length) {
      steps[index].classList.add('active');
      
      // –ü—Ä–æ–∫—Ä—É—á—É—î–º–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, —â–æ–± –±—É–ª–æ –≤–∏–¥–Ω–æ –∞–∫—Ç–∏–≤–Ω–∏–π –∫—Ä–æ–∫
      steps[index].scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    }
  }

  /**
   * –ü–æ–∫–∞–∑ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} message - —Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  showToast(message) {
    // –û—á–∏—â–∞—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ–π —Ç–∞–π–º–µ—Ä, —è–∫—â–æ –≤—ñ–Ω —î
    if (this.toastTimer) {
      clearTimeout(this.toastTimer);
    }
    
    this.toast.textContent = message;
    this.toast.style.display = 'block';
    
    // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç–∞–π–º–µ—Ä, —â–æ–± –º–∞—Ç–∏ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—å –π–æ–≥–æ –æ—á–∏—Å—Ç–∏—Ç–∏
    this.toastTimer = setTimeout(() => {
      this.toast.style.display = 'none';
    }, CONFIG.TOAST_DURATION);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∫—Ä–æ–∫—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏
   * @returns {NodeList} –µ–ª–µ–º–µ–Ω—Ç–∏ –∫—Ä–æ–∫—ñ–≤ –ø—Ä–æ–≥—Ä–∞–º–∏
   */
  getProgramSteps() {
    return this.programContainer.querySelectorAll('.program-step');
  }
} 
