/**
 * –û—Å–Ω–æ–≤–Ω–∏–π –º–æ–¥—É–ª—å –≥—Ä–∏ "–§–µ—Ä–º–µ—Ä –ë–æ—Ç –ü–ª—é—Å"
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ª–æ–≥—ñ–∫—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É, –≤–∑–∞—î–º–æ–¥—ñ—é –∑ DOM —Ç–∞ –æ–±—Ä–æ–±–∫—É –∫–æ–º–∞–Ω–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 */

const game = (function() {
  // –ü—Ä–∏–≤–∞—Ç–Ω—ñ –∑–º—ñ–Ω–Ω—ñ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –≥—Ä–∏
  let robotPosition = { x: 0, y: 0 }; // –ü–æ—Ç–æ—á–Ω–∞ –ø–æ–∑–∏—Ü—ñ—è —Ä–æ–±–æ—Ç–∞
  let collectibles = []; // –ú–∞—Å–∏–≤ –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –∑–±–æ—Ä—É
  let walls = []; // –ú–∞—Å–∏–≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å—Ç—ñ–Ω
  let isRunning = false; // –ß–∏ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–æ–≥—Ä–∞–º–∞
  let stepCount = 0; // –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤
  let maxSteps = 30; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫—Ä–æ–∫—ñ–≤ –Ω–∞ —Ä—ñ–≤–µ–Ω—å
  let gridSize = CONFIG.DEFAULT_GRID_SIZE; // –†–æ–∑–º—ñ—Ä –ø–æ–ª—è
  let executionInterval = null; // –Ü–Ω—Ç–µ—Ä–≤–∞–ª –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥
  let currentCommandIndex = 0; // –Ü–Ω–¥–µ–∫—Å –ø–æ—Ç–æ—á–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏
  let parsedCommands = []; // –ú–∞—Å–∏–≤ —Ä–æ–∑–ø–∞—Ä—Å–µ–Ω–∏—Ö –∫–æ–º–∞–Ω–¥
  let currentLevelIndex = 0; // –ü–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–≤–µ–Ω—å
  
  // DOM-–µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
  const robotField = document.getElementById("robotField"); // –ü–æ–ª–µ –≥—Ä–∏
  const stepCountElement = document.getElementById("stepCount"); // –õ—ñ—á–∏–ª—å–Ω–∏–∫ –∫—Ä–æ–∫—ñ–≤
  const programTextarea = document.getElementById("programCode"); // –¢–µ–∫—Å—Ç–æ–≤–µ –ø–æ–ª–µ –¥–ª—è –∫–æ–¥—É
  const levelDescriptionElement = document.getElementById("levelDescription"); // –û–ø–∏—Å —Ä—ñ–≤–Ω—è
  const levelProgressElement = document.getElementById("levelProgress"); // –ü—Ä–æ–≥—Ä–µ—Å —Ä—ñ–≤–Ω—ñ–≤
  
  /**
   * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –≥—Ä–∏: –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î —Ä—ñ–≤–µ–Ω—å, –æ–Ω–æ–≤–ª—é—î —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ç–∞ —Ö–æ–≤–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  function initGame() {
    loadLevel();
    updateStepCounter();
    displayLevels();
    // –ü—Ä–∏—Ö–æ–≤–∞—Ç–∏ toast –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
    const toast = document.getElementById("toast");
    if (toast) {
      toast.style.display = "none";
    }
  }

  /**
   * –í—ñ–¥–æ–±—Ä–∞–∂–∞—î —Å–ø–∏—Å–æ–∫ —Ä—ñ–≤–Ω—ñ–≤ —Ç–∞ –≤–∏–¥—ñ–ª—è—î –∞–∫—Ç–∏–≤–Ω–∏–π
   */
  function displayLevels() {
    levelProgressElement.innerHTML = "";
    LEVELS.forEach((level, index) => {
      const levelBtn = document.createElement("div");
      levelBtn.className = "level-btn" + (index === currentLevelIndex ? " active" : "");
      levelBtn.textContent = `${utils.translate('level')} ${index + 1}`;
      levelBtn.onclick = () => jumpToLevel(index);
      levelProgressElement.appendChild(levelBtn);
    });
  }

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
   * @param {number} index - –Ü–Ω–¥–µ–∫—Å —Ä—ñ–≤–Ω—è
   */
  function jumpToLevel(index) {
    if (index >= 0 && index < LEVELS.length) {
      currentLevelIndex = index;
      resetLevel();
    }
  }

  /**
   * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è: –æ–Ω–æ–≤–ª—é—î –ø–æ–ª–µ, –ø—Ä–µ–¥–º–µ—Ç–∏, –ø–æ–∑–∏—Ü—ñ—é —Ä–æ–±–æ—Ç–∞
   */
  function loadLevel() {
    const levelConfig = LEVELS[currentLevelIndex];
    gridSize = levelConfig.gridSize;
    robotPosition = utils.deepClone(levelConfig.robotStart);
    maxSteps = levelConfig.maxSteps;
    walls = utils.deepClone(levelConfig.walls);
    stepCount = 0;
    currentCommandIndex = 0;
    parsedCommands = [];
    
    // –û–Ω–æ–≤–ª–µ–Ω–Ω—è –æ–ø–∏—Å—É —Ä—ñ–≤–Ω—è
    levelDescriptionElement.textContent = levelConfig.description;
    createField();
    updateStepCounter();
    utils.logToConsole(utils.translate('gameInitialized'));
    displayLevels();
  }

  /**
   * –°—Ç–≤–æ—Ä—é—î HTML-—Å—Ç—Ä—É–∫—Ç—É—Ä—É —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
   */
  function createField() {
    robotField.innerHTML = "";
    
    // –ê–¥–∞–ø—Ç–∏–≤–Ω—ñ —Ä–æ–∑–º—ñ—Ä–∏ –∫–ª—ñ—Ç–∏–Ω–æ–∫ –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —Ä–æ–∑–º—ñ—Ä—É –ø–æ–ª—è
    let cellSize = 50; // –±–∞–∑–æ–≤–∏–π —Ä–æ–∑–º—ñ—Ä
    if (gridSize >= 8 && gridSize < 9) {
      cellSize = 45; // –º–µ–Ω—à–∏–π —Ä–æ–∑–º—ñ—Ä –¥–ª—è 8x8
    } else if (gridSize >= 9 && gridSize < 10) {
      cellSize = 40; // —â–µ –º–µ–Ω—à–∏–π –¥–ª—è 9x9
    } else if (gridSize >= 10) {
      cellSize = 35; // –Ω–∞–π–º–µ–Ω—à–∏–π –¥–ª—è 10x10 —ñ –±—ñ–ª—å—à–µ
    }
    
    robotField.style.gridTemplateColumns = `repeat(${gridSize}, ${cellSize}px)`;
    robotField.style.gridTemplateRows = `repeat(${gridSize}, ${cellSize}px)`;
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ CSS –∑–º—ñ–Ω–Ω—É –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É –∫–ª—ñ—Ç–∏–Ω–∫–∏
    document.documentElement.style.setProperty('--current-cell-size', `${cellSize}px`);
    
    for (let y = 0; y < gridSize; y++) {
      for (let x = 0; x < gridSize; x++) {
        const cell = document.createElement("div");
        cell.className = "cell";
        cell.dataset.x = x;
        cell.dataset.y = y;
        robotField.appendChild(cell);
      }
    }
    
    updateWalls();
    updateRobotPosition();
    placeCollectibles();
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Å—Ç—ñ–Ω –Ω–∞ –ø–æ–ª—ñ
   */
  function updateWalls() {
    document.querySelectorAll(".cell").forEach((cell) => {
      cell.classList.remove("wall");
    });
    
    walls.forEach((wall) => {
      const cell = document.querySelector(`.cell[data-x="${wall.x}"][data-y="${wall.y}"]`);
      if (cell) cell.classList.add("wall");
    });
  }

  /**
   * –†–æ–∑–º—ñ—â—É—î –ø—Ä–µ–¥–º–µ—Ç–∏ –¥–ª—è –∑–±–æ—Ä—É –Ω–∞ –ø–æ–ª—ñ
   */
  function placeCollectibles() {
    collectibles = [];
    const levelConfig = LEVELS[currentLevelIndex];
    
    // –†–æ–∑–º—ñ—â—É—î–º–æ –∫–æ–ª–µ–∫—Ç–∏–±–ª–∏ –≤ –≤–∏–ø–∞–¥–∫–æ–≤–∏—Ö –ø–æ–∑–∏—Ü—ñ—è—Ö
    while (collectibles.length < levelConfig.collectiblesCount) {
      const x = Math.floor(Math.random() * gridSize);
      const y = Math.floor(Math.random() * gridSize);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —â–æ–± –Ω–µ –Ω–∞–∫–ª–∞–¥–∞–ª–∏—Å—å –Ω–∞ —Ä–æ–±–æ—Ç–∞ —á–∏ —Å—Ç—ñ–Ω–∏
      if (
        !utils.isSamePosition({x, y}, robotPosition) &&
        !utils.containsPosition(collectibles, {x, y}) &&
        !utils.containsPosition(walls, {x, y})
      ) {
        collectibles.push({ x, y, type: levelConfig.collectibleType });
      }
    }
    
    updateCollectibles();
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ø–æ–∑–∏—Ü—ñ—é —Ä–æ–±–æ—Ç–∞ –Ω–∞ –ø–æ–ª—ñ
   */
  function updateRobotPosition() {
    document.querySelectorAll(".robot-icon").forEach((icon) => icon.remove());
    const cell = document.querySelector(`.cell[data-x="${robotPosition.x}"][data-y="${robotPosition.y}"]`);
    
    if (cell) {
      const robotIcon = document.createElement("div");
      robotIcon.className = "robot-icon";
      robotIcon.innerHTML = "ü§ñ";
      cell.appendChild(robotIcon);
    }
    
    checkCollectibles();
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—ñ–≤ –¥–ª—è –∑–±–æ—Ä—É
   */
  function updateCollectibles() {
    document.querySelectorAll(".collectible").forEach((item) => item.remove());
    
    collectibles.forEach((item) => {
      const cell = document.querySelector(`.cell[data-x="${item.x}"][data-y="${item.y}"]`);
      if (cell) {
        const collectibleIcon = document.createElement("div");
        collectibleIcon.className = "collectible";
        collectibleIcon.innerHTML = item.type;
        cell.appendChild(collectibleIcon);
      }
    });
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –∑—ñ–±—Ä–∞–Ω–æ –≤—Å—ñ –ø—Ä–µ–¥–º–µ—Ç–∏, —Ç–∞ –ø–æ–∫–∞–∑—É—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
   */
  function checkCollectibles() {
    const itemIndex = collectibles.findIndex(item => 
      utils.isSamePosition(item, robotPosition)
    );
    
    if (itemIndex !== -1) {
      const collectedItem = collectibles[itemIndex];
      collectibles.splice(itemIndex, 1);
      updateCollectibles();
      
      // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–±—ñ—Ä
      utils.logToConsole(
        `${utils.translate('fruitCollected')} ${collectedItem.type}! ${utils.translate('remaining')}: ${collectibles.length}`,
        MESSAGE_TYPES.SUCCESS
      );
      
      // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
      if (collectibles.length === 0) {
        setTimeout(() => {
          isRunning = false;
          clearInterval(executionInterval);
          utils.showToast(utils.translate('levelSuccess'));
          utils.logToConsole(utils.translate('levelCompleted'), MESSAGE_TYPES.SUCCESS);
          
          // –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è –ø—ñ—Å–ª—è –∑–∞—Ç—Ä–∏–º–∫–∏
          setTimeout(() => {
            nextLevel();
          }, CONFIG.NEXT_LEVEL_DELAY);
        }, 500);
      }
    }
  }

  /**
   * –û–Ω–æ–≤–ª—é—î –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫—Ä–æ–∫—ñ–≤ –Ω–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ
   */
  function updateStepCounter() {
    stepCountElement.textContent = `${utils.translate('steps')}: ${stepCount} / ${maxSteps}`;
    stepCountElement.style.backgroundColor =
      stepCount > maxSteps ? "var(--warning-color)" : "var(--primary-color)";
  }

  /**
   * –ü–µ—Ä–µ–º—ñ—â—É—î —Ä–æ–±–æ—Ç–∞ —É –∑–∞–¥–∞–Ω–æ–º—É –Ω–∞–ø—Ä—è–º–∫—É
   * @param {string} direction - –ù–∞–ø—Ä—è–º–æ–∫ —Ä—É—Ö—É
   * @returns {boolean} –£—Å–ø—ñ—à–Ω—ñ—Å—Ç—å —Ä—É—Ö—É
   */
  function moveRobot(direction) {
    let newPosition = utils.deepClone(robotPosition);
    
    switch (direction) {
      case COMMANDS.UP:
        newPosition.y = Math.max(0, newPosition.y - 1);
        break;
      case COMMANDS.DOWN:
        newPosition.y = Math.min(gridSize - 1, newPosition.y + 1);
        break;
      case COMMANDS.LEFT:
        newPosition.x = Math.max(0, newPosition.x - 1);
        break;
      case COMMANDS.RIGHT:
        newPosition.x = Math.min(gridSize - 1, newPosition.x + 1);
        break;
      default:
        utils.logToConsole(`${utils.translate('unknownCommand')}: ${direction}`, MESSAGE_TYPES.ERROR);
        return false;
    }
    
    // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Å—Ç—ñ–Ω—É
    const hitWall = utils.containsPosition(walls, newPosition);
    if (hitWall) {
      utils.logToConsole(utils.translate('wallHit'), MESSAGE_TYPES.ERROR);
      return false;
    }
    
    // –†—É—Ö —É—Å–ø—ñ—à–Ω–∏–π
    robotPosition = newPosition;
    stepCount++;
    updateStepCounter();
    updateRobotPosition();
    
    if (stepCount > maxSteps) {
      utils.logToConsole(`${utils.translate('stepsExceeded')} (${maxSteps})`, MESSAGE_TYPES.ERROR);
    }
    
    return true;
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —É –º–∞—Å–∏–≤ –∫–æ–º–∞–Ω–¥
   * @returns {Array|null} –ú–∞—Å–∏–≤ –∫–æ–º–∞–Ω–¥ –∞–±–æ null –≤ —Ä–∞–∑—ñ –ø–æ–º–∏–ª–∫–∏
   */
  function parseProgram() {
    const code = programTextarea.value.trim();
    if (!code) {
      utils.showError(utils.translate('programEmpty'));
      return null;
    }
    
    const lines = code.split("\n");
    const commands = [];
    
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      if (!line || line.startsWith("//")) continue;
      
      const parts = line.split(" ");
      const command = parts[0].toLowerCase();
      const count = parts.length > 1 ? parseInt(parts[1]) : 1;
      
      if (isNaN(count) || count < 1) {
        utils.showError(`${utils.translate('invalidIterations')} ${utils.translate('line')} ${i + 1}`);
        return null;
      }
      
      if (!utils.isValidCommand(command)) {
        utils.showError(`${utils.translate('unknownCommand')} "${command}" (${utils.translate('line')} ${i + 1})`);
        return null;
      }
      
      for (let j = 0; j < count; j++) {
        commands.push({ command: command, line: i + 1 });
      }
    }
    
    return commands;
  }

  /**
   * –ó–∞–ø—É—Å–∫–∞—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  function runProgram() {
    if (isRunning) return;
    
    parsedCommands = parseProgram();
    if (!parsedCommands) return;
    
    currentCommandIndex = 0;
    stepCount = 0;
    updateStepCounter();
    isRunning = true;
    utils.logToConsole(utils.translate('programStarted'));
    executionInterval = setInterval(executeNextCommand, CONFIG.ANIMATION_SPEED);
  }

  /**
   * –í–∏–∫–æ–Ω—É—î –Ω–∞—Å—Ç—É–ø–Ω—É –∫–æ–º–∞–Ω–¥—É –∑ –ø—Ä–æ–≥—Ä–∞–º–∏
   */
  function executeNextCommand() {
    if (!isRunning || currentCommandIndex >= parsedCommands.length) {
      stopProgram();
      
      if (collectibles.length > 0) {
        utils.logToConsole(utils.translate('programIncomplete'), MESSAGE_TYPES.ERROR);
      } else {
        utils.logToConsole(utils.translate('programCompleted'), MESSAGE_TYPES.SUCCESS);
      }
      return;
    }
    
    const currentCommand = parsedCommands[currentCommandIndex];
    utils.logToConsole(`${utils.translate('executing')}: ${currentCommand.command} (${utils.translate('line')} ${currentCommand.line})`);
    
    const success = moveRobot(currentCommand.command);
    currentCommandIndex++;
    
    if (!success) {
      stopProgram();
      utils.logToConsole(utils.translate('programError'), MESSAGE_TYPES.ERROR);
    }
  }

  /**
   * –ó—É–ø–∏–Ω—è—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –ø—Ä–æ–≥—Ä–∞–º–∏
   */
  function stopProgram() {
    if (!isRunning) return;
    
    clearInterval(executionInterval);
    isRunning = false;
    utils.logToConsole(utils.translate('programStopped'));
  }

  /**
   * –°–∫–∏–¥–∞—î —Ä—ñ–≤–µ–Ω—å –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
   */
  function resetLevel() {
    stopProgram();
    stepCount = 0;
    currentCommandIndex = 0;
    parsedCommands = [];
    
    // –û—á–∏—â–µ–Ω–Ω—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—è –∫–æ–º–∞–Ω–¥
    programTextarea.value = "";
    loadLevel();
    utils.logToConsole(utils.translate('levelReset'));
  }

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ä—ñ–≤–Ω—è
   */
  function nextLevel() {
    if (currentLevelIndex < LEVELS.length - 1) {
      currentLevelIndex++;
      resetLevel();
    } else {
      utils.logToConsole(utils.translate('allLevelsCompleted'), MESSAGE_TYPES.SUCCESS);
    }
  }

  // –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  window.onload = initGame;

  // –ü—É–±–ª—ñ—á–Ω–∏–π —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –¥–æ—Å—Ç—É–ø–Ω—ñ –º–µ—Ç–æ–¥–∏ –¥–ª—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –≥—Ä–æ—é –∑ HTML
  return {
    runProgram,
    stopProgram,
    resetLevel,
    jumpToLevel,
    nextLevel
  };
})(); 
