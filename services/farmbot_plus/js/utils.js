/**
 * –£—Ç–∏–ª—ñ—Ç–∏ —Ç–∞ –¥–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≥—Ä–∏ "–§–µ—Ä–º–µ—Ä –ë–æ—Ç –ü–ª—é—Å"
 */

const utils = {
  /**
   * –ü–æ—Ç–æ—á–Ω–∞ –º–æ–≤–∞ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
   */
  currentLang: 'uk',
  
  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –ø–µ—Ä–µ–∫–ª–∞–¥ –∑–∞ –∫–ª—é—á–µ–º
   * @param {string} key - –ö–ª—é—á –ø–µ—Ä–µ–∫–ª–∞–¥—É
   * @param {object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∏
   * @returns {string} –ü–µ—Ä–µ–∫–ª–∞–¥–µ–Ω–∏–π —Ç–µ–∫—Å—Ç
   */
  translate(key, params = {}) {
    const translation = TRANSLATIONS[this.currentLang][key] || key;
    
    // –ü—ñ–¥—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤, —è–∫—â–æ –≤–æ–Ω–∏ —î
    if (Object.keys(params).length) {
      return Object.keys(params).reduce((result, param) => {
        return result.replace(`{${param}}`, params[param]);
      }, translation);
    }
    
    return translation;
  },
  
  /**
   * –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
   * @param {string} lang - –ö–æ–¥ –º–æ–≤–∏ (uk, en)
   */
  setLanguage(lang) {
    if (TRANSLATIONS[lang]) {
      this.currentLang = lang;
      // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
    }
  },
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–ª–∏–≤–∞—é—á–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {boolean} isError - –ß–∏ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–æ—é
   */
  showToast(message, isError = false) {
    const toast = document.getElementById("toast");
    const messageElement = toast.querySelector(".toast-message") || toast;
    
    if (messageElement !== toast) {
      messageElement.textContent = message;
    } else {
      toast.textContent = message;
    }
    
    // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É —ñ–∫–æ–Ω–∫—É
    const iconElement = toast.querySelector(".toast-icon");
    if (iconElement) {
      iconElement.textContent = isError ? "‚ùå" : "üéâ";
    }
    
    toast.style.backgroundColor = isError 
      ? 'var(--error-color)' 
      : 'var(--success-color)';
      
    // –ü–æ–∫–∞–∑—É—î–º–æ toast
    toast.style.display = "flex";
    
    // –ê–Ω—ñ–º–∞—Ü—ñ—è –ø–æ—è–≤–∏
    toast.style.animation = 'none';
    // Forced reflow to restart animation
    toast.offsetHeight;
    toast.style.animation = 'toast-appear 0.3s ease';
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Ö–æ–≤–∞—î–º–æ —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω–∏–π —á–∞—Å
    setTimeout(() => {
      toast.style.display = "none";
    }, CONFIG.TOAST_DURATION);
  },
  
  /**
   * –ü–æ–∫–∞–∑–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  showError(message) {
    this.logToConsole(message, MESSAGE_TYPES.ERROR);
    this.showToast(message, true);
  },
  
  /**
   * –î–æ–¥–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å
   * @param {string} message - –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * @param {string} type - –¢–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (info, error, success)
   */
  logToConsole(message, type = MESSAGE_TYPES.INFO) {
    const consoleEl = document.getElementById("console");
    const line = document.createElement("div");
    line.className = "console-line";
    
    if (type === MESSAGE_TYPES.ERROR) {
      line.classList.add("console-error");
      message = "‚ùå " + message;
    } else if (type === MESSAGE_TYPES.SUCCESS) {
      line.classList.add("console-success");
      message = "‚úÖ " + message;
    }
    
    line.textContent = message;
    consoleEl.appendChild(line);
    consoleEl.scrollTop = consoleEl.scrollHeight;
    
    // –û–±–º–µ–∂–µ–Ω–Ω—è –∫—ñ–ª—å–∫–æ—Å—Ç—ñ —Ä—è–¥–∫—ñ–≤
    while (consoleEl.children.length > CONFIG.MAX_CONSOLE_LINES) {
      consoleEl.children[0].remove();
    }
  },
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ–º–∞–Ω–¥–∞ –≤–∞–ª—ñ–¥–Ω–æ—é
   * @param {string} command - –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   */
  isValidCommand(command) {
    return Object.values(COMMANDS).includes(command);
  },
  
  /**
   * –ü–µ—Ä–µ—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ –≤ —Ä—è–¥–æ–∫
   * @param {object} position - –û–±'—î–∫—Ç –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ {x, y}
   * @returns {string} –†—è–¥–æ–∫ –∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ "x,y"
   */
  positionToString(position) {
    return `${position.x},${position.y}`;
  },
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –¥–≤—ñ –ø–æ–∑–∏—Ü—ñ—ó –æ–¥–Ω–∞–∫–æ–≤—ñ
   * @param {object} pos1 - –ü–µ—Ä—à–∞ –ø–æ–∑–∏—Ü—ñ—è {x, y}
   * @param {object} pos2 - –î—Ä—É–≥–∞ –ø–æ–∑–∏—Ü—ñ—è {x, y}
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è
   */
  isSamePosition(pos1, pos2) {
    return pos1.x === pos2.x && pos1.y === pos2.y;
  },
  
  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —á–∏ –º—ñ—Å—Ç–∏—Ç—å –º–∞—Å–∏–≤ –ø–æ–∑–∏—Ü—ñ—ó –≤–∫–∞–∑–∞–Ω—É –ø–æ–∑–∏—Ü—ñ—é
   * @param {Array} positions - –ú–∞—Å–∏–≤ –ø–æ–∑–∏—Ü—ñ–π [{x, y}, ...]
   * @param {object} position - –ü–æ–∑–∏—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ {x, y}
   * @returns {boolean} –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
   */
  containsPosition(positions, position) {
    return positions.some(pos => this.isSamePosition(pos, position));
  },
  
  /**
   * –°—Ç–≤–æ—Ä–∏—Ç–∏ –≥–ª–∏–±–æ–∫—É –∫–æ–ø—ñ—é –æ–±'—î–∫—Ç–∞
   * @param {*} obj - –û–±'—î–∫—Ç –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
   * @returns {*} –ì–ª–∏–±–æ–∫–∞ –∫–æ–ø—ñ—è –æ–±'—î–∫—Ç–∞
   */
  deepClone(obj) {
    return JSON.parse(JSON.stringify(obj));
  }
}; 
